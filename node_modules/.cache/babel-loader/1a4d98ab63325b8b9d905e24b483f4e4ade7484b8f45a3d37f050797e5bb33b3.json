{"ast":null,"code":"import { areTweetsLoaded, getTweet } from './selectors';\nimport { AUTH_LOGIN_FAILURE, AUTH_LOGIN_REQUEST, AUTH_LOGIN_SUCCESS, AUTH_LOGOUT, TWEETS_CREATED_REQUEST, TWEETS_CREATED_SUCCESS, TWEETS_CREATED_FAILURE, TWEETS_DETAIL_FAILURE, TWEETS_DETAIL_REQUEST, TWEETS_DETAIL_SUCCESS, TWEETS_LOADED_FAILURE, TWEETS_LOADED_REQUEST, TWEETS_LOADED_SUCCESS, UI_RESET_ERROR } from './types';\nimport * as auth from '../pages/auth/service';\nexport const authLoginRequest = () => ({\n  type: AUTH_LOGIN_REQUEST\n});\nexport const authLoginSuccess = () => ({\n  type: AUTH_LOGIN_SUCCESS\n});\nexport const authLoginFailure = error => ({\n  type: AUTH_LOGIN_FAILURE,\n  error: true,\n  payload: error\n});\nexport function authLogin(credentials) {\n  return async function (dispatch, getState, {\n    api: {\n      auth\n    },\n    router\n  }) {\n    try {\n      var _router$state$locatio, _router$state$locatio2;\n      dispatch(authLoginRequest());\n      await auth.login(credentials);\n      dispatch(authLoginSuccess());\n      const to = ((_router$state$locatio = router.state.location.state) === null || _router$state$locatio === void 0 ? void 0 : (_router$state$locatio2 = _router$state$locatio.from) === null || _router$state$locatio2 === void 0 ? void 0 : _router$state$locatio2.pathname) || '/';\n      router.navigate(to);\n    } catch (error) {\n      dispatch(authLoginFailure(error));\n    }\n  };\n}\nexport const authLogout = () => ({\n  type: AUTH_LOGOUT\n});\nexport const tweetsLoadedRequest = () => ({\n  type: TWEETS_LOADED_REQUEST\n});\nexport const tweetsLoadedSuccess = tweets => ({\n  type: TWEETS_LOADED_SUCCESS,\n  payload: tweets\n});\nexport const tweetsLoadedFailure = error => ({\n  type: TWEETS_LOADED_FAILURE,\n  error: true,\n  payload: error\n});\nexport function loadTweets() {\n  return async function (dispatch, getState, {\n    api: {\n      tweets\n    }\n  }) {\n    if (areTweetsLoaded(getState())) {\n      return;\n    }\n    try {\n      dispatch(tweetsLoadedRequest());\n      const tweetsList = await tweets.getLatestTweets();\n      dispatch(tweetsLoadedSuccess(tweetsList));\n    } catch (error) {\n      dispatch(tweetsLoadedFailure(error));\n    }\n  };\n}\nexport const tweetsDetailRequest = () => ({\n  type: TWEETS_DETAIL_REQUEST\n});\nexport const tweetsDetailSuccess = tweet => ({\n  type: TWEETS_DETAIL_SUCCESS,\n  payload: tweet\n});\nexport const tweetsDetailFailure = error => ({\n  type: TWEETS_DETAIL_FAILURE,\n  error: true,\n  payload: error\n});\nexport function detailTweets(tweetId) {\n  return async function (dispatch, getState, {\n    api: {\n      tweets\n    }\n  }) {\n    if (getTweet(tweetId)(getState())) {\n      return;\n    }\n    try {\n      dispatch(tweetsDetailRequest());\n      const tweet = await tweets.getTweet(tweetId);\n      dispatch(tweetsDetailSuccess(tweet));\n    } catch (error) {\n      dispatch(tweetsDetailFailure(error));\n    }\n  };\n}\nexport const tweetsCreatedRequest = () => ({\n  type: TWEETS_CREATED_REQUEST\n});\nexport const tweetsCreatedSuccess = tweet => ({\n  type: TWEETS_CREATED_SUCCESS,\n  payload: tweet\n});\nexport const tweetsCreatedFailure = error => ({\n  type: TWEETS_CREATED_FAILURE,\n  error: true,\n  payload: error\n});\nexport function createTweet(tweet) {\n  return async function (dispatch, _getState, {\n    api: {\n      tweets\n    },\n    router\n  }) {\n    try {\n      dispatch(tweetsCreatedRequest());\n      const {\n        id\n      } = await tweets.createTweet(tweet);\n      // To complete tweet info\n      const createdTweet = await tweets.getTweet(id);\n      dispatch(tweetsCreatedSuccess(createdTweet));\n      router.navigate(`/tweets/${createdTweet.id}`);\n    } catch (error) {\n      dispatch(tweetsCreatedFailure(error));\n    }\n  };\n}\nexport const uiResetError = () => ({\n  type: UI_RESET_ERROR\n});","map":{"version":3,"names":["areTweetsLoaded","getTweet","AUTH_LOGIN_FAILURE","AUTH_LOGIN_REQUEST","AUTH_LOGIN_SUCCESS","AUTH_LOGOUT","TWEETS_CREATED_REQUEST","TWEETS_CREATED_SUCCESS","TWEETS_CREATED_FAILURE","TWEETS_DETAIL_FAILURE","TWEETS_DETAIL_REQUEST","TWEETS_DETAIL_SUCCESS","TWEETS_LOADED_FAILURE","TWEETS_LOADED_REQUEST","TWEETS_LOADED_SUCCESS","UI_RESET_ERROR","auth","authLoginRequest","type","authLoginSuccess","authLoginFailure","error","payload","authLogin","credentials","dispatch","getState","api","router","_router$state$locatio","_router$state$locatio2","login","to","state","location","from","pathname","navigate","authLogout","tweetsLoadedRequest","tweetsLoadedSuccess","tweets","tweetsLoadedFailure","loadTweets","tweetsList","getLatestTweets","tweetsDetailRequest","tweetsDetailSuccess","tweet","tweetsDetailFailure","detailTweets","tweetId","tweetsCreatedRequest","tweetsCreatedSuccess","tweetsCreatedFailure","createTweet","_getState","id","createdTweet","uiResetError"],"sources":["/Users/alex/Desktop/KEEPKODING/REACT_AVANZADO/GIT/FullStack07_React_app_tweeter_REDUX_Toolkit/src/store/actions.js"],"sourcesContent":["import { areTweetsLoaded, getTweet } from './selectors';\nimport {\n  AUTH_LOGIN_FAILURE,\n  AUTH_LOGIN_REQUEST,\n  AUTH_LOGIN_SUCCESS,\n  AUTH_LOGOUT,\n  TWEETS_CREATED_REQUEST,\n  TWEETS_CREATED_SUCCESS,\n  TWEETS_CREATED_FAILURE,\n  TWEETS_DETAIL_FAILURE,\n  TWEETS_DETAIL_REQUEST,\n  TWEETS_DETAIL_SUCCESS,\n  TWEETS_LOADED_FAILURE,\n  TWEETS_LOADED_REQUEST,\n  TWEETS_LOADED_SUCCESS,\n  UI_RESET_ERROR,\n} from './types';\n\nimport * as auth from '../pages/auth/service';\n\nexport const authLoginRequest = () => ({\n  type: AUTH_LOGIN_REQUEST,\n});\n\nexport const authLoginSuccess = () => ({\n  type: AUTH_LOGIN_SUCCESS,\n});\n\nexport const authLoginFailure = error => ({\n  type: AUTH_LOGIN_FAILURE,\n  error: true,\n  payload: error,\n});\n\nexport function authLogin(credentials) {\n  return async function (dispatch, getState, { api: { auth }, router }) {\n    try {\n      dispatch(authLoginRequest());\n      await auth.login(credentials);\n      dispatch(authLoginSuccess());\n      const to = router.state.location.state?.from?.pathname || '/';\n      router.navigate(to);\n    } catch (error) {\n      dispatch(authLoginFailure(error));\n    }\n  };\n}\n\nexport const authLogout = () => ({\n  type: AUTH_LOGOUT,\n});\n\nexport const tweetsLoadedRequest = () => ({\n  type: TWEETS_LOADED_REQUEST,\n});\n\nexport const tweetsLoadedSuccess = tweets => ({\n  type: TWEETS_LOADED_SUCCESS,\n  payload: tweets,\n});\n\nexport const tweetsLoadedFailure = error => ({\n  type: TWEETS_LOADED_FAILURE,\n  error: true,\n  payload: error,\n});\n\nexport function loadTweets() {\n  return async function (dispatch, getState, { api: { tweets } }) {\n    if (areTweetsLoaded(getState())) {\n      return;\n    }\n\n    try {\n      dispatch(tweetsLoadedRequest());\n      const tweetsList = await tweets.getLatestTweets();\n      dispatch(tweetsLoadedSuccess(tweetsList));\n    } catch (error) {\n      dispatch(tweetsLoadedFailure(error));\n    }\n  };\n}\n\nexport const tweetsDetailRequest = () => ({\n  type: TWEETS_DETAIL_REQUEST,\n});\n\nexport const tweetsDetailSuccess = tweet => ({\n  type: TWEETS_DETAIL_SUCCESS,\n  payload: tweet,\n});\n\nexport const tweetsDetailFailure = error => ({\n  type: TWEETS_DETAIL_FAILURE,\n  error: true,\n  payload: error,\n});\n\nexport function detailTweets(tweetId) {\n  return async function (dispatch, getState, { api: { tweets } }) {\n    if (getTweet(tweetId)(getState())) {\n      return;\n    }\n\n    try {\n      dispatch(tweetsDetailRequest());\n      const tweet = await tweets.getTweet(tweetId);\n      dispatch(tweetsDetailSuccess(tweet));\n    } catch (error) {\n      dispatch(tweetsDetailFailure(error));\n    }\n  };\n}\n\nexport const tweetsCreatedRequest = () => ({\n  type: TWEETS_CREATED_REQUEST,\n});\n\nexport const tweetsCreatedSuccess = tweet => ({\n  type: TWEETS_CREATED_SUCCESS,\n  payload: tweet,\n});\n\nexport const tweetsCreatedFailure = error => ({\n  type: TWEETS_CREATED_FAILURE,\n  error: true,\n  payload: error,\n});\n\nexport function createTweet(tweet) {\n  return async function (dispatch, _getState, { api: { tweets }, router }) {\n    try {\n      dispatch(tweetsCreatedRequest());\n      const { id } = await tweets.createTweet(tweet);\n      // To complete tweet info\n      const createdTweet = await tweets.getTweet(id);\n      dispatch(tweetsCreatedSuccess(createdTweet));\n      router.navigate(`/tweets/${createdTweet.id}`);\n    } catch (error) {\n      dispatch(tweetsCreatedFailure(error));\n    }\n  };\n}\n\nexport const uiResetError = () => ({ type: UI_RESET_ERROR });"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}