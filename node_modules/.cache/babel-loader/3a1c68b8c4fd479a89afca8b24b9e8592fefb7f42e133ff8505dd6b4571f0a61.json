{"ast":null,"code":"import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { areTweetsLoaded, getTweet } from './selectors';\nimport { TWEETS_CREATED_REQUEST, TWEETS_CREATED_SUCCESS, TWEETS_CREATED_FAILURE, TWEETS_DETAIL_FAILURE, TWEETS_DETAIL_REQUEST, TWEETS_DETAIL_SUCCESS, TWEETS_LOADED_FAILURE, TWEETS_LOADED_REQUEST, TWEETS_LOADED_SUCCESS } from './types';\nexport const authLogin = createAsyncThunk('auth/login', (credentials, {\n  extra: {\n    api: {\n      auth\n    },\n    router\n  },\n  rejectWithValue\n}) => auth.login(credentials).then(() => {\n  var _router$state$locatio, _router$state$locatio2;\n  const to = ((_router$state$locatio = router.state.location.state) === null || _router$state$locatio === void 0 ? void 0 : (_router$state$locatio2 = _router$state$locatio.from) === null || _router$state$locatio2 === void 0 ? void 0 : _router$state$locatio2.pathname) || '/';\n  router.navigate(to);\n}).catch(rejectWithValue));\nexport const authLogout = createAsyncThunk('auth/logout', (_, {\n  extra: {\n    api: {\n      auth\n    }\n  }\n}) => auth.logout());\nexport const tweetsList = createAsyncThunk('tweets/list', async (_, {\n  extra: {\n    api: {\n      tweets\n    }\n  },\n  rejectWithValue\n}) => {\n  try {\n    const tweetsList = await tweets.getLatestTweets();\n    return tweetsList;\n  } catch (error) {\n    rejectWithValue(error);\n  }\n}, {\n  condition: (_, {\n    getState\n  }) => !areTweetsLoaded(getState())\n});\nexport const tweetsDetailRequest = () => ({\n  type: TWEETS_DETAIL_REQUEST\n});\nexport const tweetsDetailSuccess = tweet => ({\n  type: TWEETS_DETAIL_SUCCESS,\n  payload: tweet\n});\nexport const tweetsDetailFailure = error => ({\n  type: TWEETS_DETAIL_FAILURE,\n  error: true,\n  payload: error\n});\nexport function detailTweets(tweetId) {\n  return async function (dispatch, getState, {\n    api: {\n      tweets\n    }\n  }) {\n    if (getTweet(tweetId)(getState())) {\n      return;\n    }\n    try {\n      dispatch(tweetsDetailRequest());\n      const tweet = await tweets.getTweet(tweetId);\n      dispatch(tweetsDetailSuccess(tweet));\n    } catch (error) {\n      dispatch(tweetsDetailFailure(error));\n    }\n  };\n}\nexport const tweetsCreatedRequest = () => ({\n  type: TWEETS_CREATED_REQUEST\n});\nexport const tweetsCreatedSuccess = tweet => ({\n  type: TWEETS_CREATED_SUCCESS,\n  payload: tweet\n});\nexport const tweetsCreatedFailure = error => ({\n  type: TWEETS_CREATED_FAILURE,\n  error: true,\n  payload: error\n});\nexport function createTweet(tweet) {\n  return async function (dispatch, _getState, {\n    api: {\n      tweets\n    },\n    router\n  }) {\n    try {\n      dispatch(tweetsCreatedRequest());\n      const {\n        id\n      } = await tweets.createTweet(tweet);\n      // To complete tweet info\n      const createdTweet = await tweets.getTweet(id);\n      dispatch(tweetsCreatedSuccess(createdTweet));\n      router.navigate(`/tweets/${createdTweet.id}`);\n    } catch (error) {\n      dispatch(tweetsCreatedFailure(error));\n    }\n  };\n}\nexport const uiResetError = createAction('ui/reset_error');","map":{"version":3,"names":["createAction","createAsyncThunk","areTweetsLoaded","getTweet","TWEETS_CREATED_REQUEST","TWEETS_CREATED_SUCCESS","TWEETS_CREATED_FAILURE","TWEETS_DETAIL_FAILURE","TWEETS_DETAIL_REQUEST","TWEETS_DETAIL_SUCCESS","TWEETS_LOADED_FAILURE","TWEETS_LOADED_REQUEST","TWEETS_LOADED_SUCCESS","authLogin","credentials","extra","api","auth","router","rejectWithValue","login","then","_router$state$locatio","_router$state$locatio2","to","state","location","from","pathname","navigate","catch","authLogout","_","logout","tweetsList","tweets","getLatestTweets","error","condition","getState","tweetsDetailRequest","type","tweetsDetailSuccess","tweet","payload","tweetsDetailFailure","detailTweets","tweetId","dispatch","tweetsCreatedRequest","tweetsCreatedSuccess","tweetsCreatedFailure","createTweet","_getState","id","createdTweet","uiResetError"],"sources":["/Users/alex/Desktop/KEEPKODING/REACT_AVANZADO/GIT/FullStack07_React_app_tweeter_REDUX_Toolkit/src/store/actions.js"],"sourcesContent":["import { createAction, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { areTweetsLoaded, getTweet } from './selectors';\nimport {\n  TWEETS_CREATED_REQUEST,\n  TWEETS_CREATED_SUCCESS,\n  TWEETS_CREATED_FAILURE,\n  TWEETS_DETAIL_FAILURE,\n  TWEETS_DETAIL_REQUEST,\n  TWEETS_DETAIL_SUCCESS,\n  TWEETS_LOADED_FAILURE,\n  TWEETS_LOADED_REQUEST,\n  TWEETS_LOADED_SUCCESS,\n} from './types';\n\nexport const authLogin = createAsyncThunk(\n  'auth/login',\n  (\n    credentials,\n    {\n      extra: {\n        api: { auth },\n        router,\n      },\n      rejectWithValue,\n    },\n  ) =>\n    auth\n      .login(credentials)\n      .then(() => {\n        const to = router.state.location.state?.from?.pathname || '/';\n        router.navigate(to);\n      })\n      .catch(rejectWithValue),\n);\n\nexport const authLogout = createAsyncThunk(\n  'auth/logout',\n  (\n    _,\n    {\n      extra: {\n        api: { auth },\n      },\n    },\n  ) => auth.logout(),\n);\n\nexport const tweetsList = createAsyncThunk(\n  'tweets/list',\n  async (\n    _,\n    {\n      extra: {\n        api: { tweets },\n      },\n      rejectWithValue,\n    },\n  ) => {\n    try {\n      const tweetsList = await tweets.getLatestTweets();\n      return tweetsList;\n    } catch (error) {\n      rejectWithValue(error);\n    }\n  },\n  { condition: (_, { getState }) => !areTweetsLoaded(getState()) },\n);\n\nexport const tweetsDetailRequest = () => ({\n  type: TWEETS_DETAIL_REQUEST,\n});\n\nexport const tweetsDetailSuccess = tweet => ({\n  type: TWEETS_DETAIL_SUCCESS,\n  payload: tweet,\n});\n\nexport const tweetsDetailFailure = error => ({\n  type: TWEETS_DETAIL_FAILURE,\n  error: true,\n  payload: error,\n});\n\nexport function detailTweets(tweetId) {\n  return async function (dispatch, getState, { api: { tweets } }) {\n    if (getTweet(tweetId)(getState())) {\n      return;\n    }\n\n    try {\n      dispatch(tweetsDetailRequest());\n      const tweet = await tweets.getTweet(tweetId);\n      dispatch(tweetsDetailSuccess(tweet));\n    } catch (error) {\n      dispatch(tweetsDetailFailure(error));\n    }\n  };\n}\n\nexport const tweetsCreatedRequest = () => ({\n  type: TWEETS_CREATED_REQUEST,\n});\n\nexport const tweetsCreatedSuccess = tweet => ({\n  type: TWEETS_CREATED_SUCCESS,\n  payload: tweet,\n});\n\nexport const tweetsCreatedFailure = error => ({\n  type: TWEETS_CREATED_FAILURE,\n  error: true,\n  payload: error,\n});\n\nexport function createTweet(tweet) {\n  return async function (dispatch, _getState, { api: { tweets }, router }) {\n    try {\n      dispatch(tweetsCreatedRequest());\n      const { id } = await tweets.createTweet(tweet);\n      // To complete tweet info\n      const createdTweet = await tweets.getTweet(id);\n      dispatch(tweetsCreatedSuccess(createdTweet));\n      router.navigate(`/tweets/${createdTweet.id}`);\n    } catch (error) {\n      dispatch(tweetsCreatedFailure(error));\n    }\n  };\n}\n\nexport const uiResetError = createAction('ui/reset_error');"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}